# Σύνθεση στοιχείων χωρικού συγκεντρωτή

Το μόνο εμπόδιο που μένει για τη χρήση του χωρικού συγκεντρωτή είναι ότι οι προηγούμενοι ορισμοί χρησιμοποιούσαν «global» μεταβλητές
για την κατάσταση και για τις παραμέτρους.
Αυτό βοήθησε να απλοποιήσουμε την περιγραφή του αλγορίθμου, αλλά όχι τη χρήση του ως βιβλιοθήκη.
Καθώς ο έλεγχος της κατάστασης είναι κρίσιμος για τη συμπερασματολογία σε οποιοδήποτε πρόγραμμα,
θα πρέπει όλες οι «global» μεταβλητές να εξαλειφθούν.
Οι τρόποι αντιμετώπισης είναι:
- να περικλείσουμε τον ορισμό των περισσότερων εξειδικευμένων συναρτήσεων εντός του πεδίου γενικότερων συναρτήσεων, όπου θα έχουν έμμεση πρόσβαση στα σύμβολα που ορίζουν οι περικλείουσες
- να δώσουμε στις γενικότερες συναρτήσεις που μενουν επιπλέον ορίσματα

_Οι ορισμοί που δίνονται παρακάτω συγκεντρώνουν όλη την υλοποίηση του χωρικού συγκεντρωτή και στέκουν αυτόνομα από τους προηγούμενους._
Δε γίνεται καμία αλλαγή στους αλγορίθμους.

Ορισμοί σταθερών και τύπων υποδομής:
```julia; results= "hidden"
using Random
using Parameters
import Lazy: @>, @>>
import StatsBase: mean, median
import ImageFiltering: mapwindow, Fill, imfilter
# Constants
const 𝕊𝕢= UInt8
const 𝕊𝕢range= 𝕊𝕢(0):typemax(𝕊𝕢)
# Topology
struct Hypercube{N}
  xᶜ::NTuple{N,Int}
  γ::Int
  sz::NTuple{N,Int}
  indices::CartesianIndices{N}
end
Hypercube(xᶜ,γ,sz)= Hypercube(xᶜ,γ,sz, start(xᶜ,γ,sz))
start(xᶜ,γ,sz)= CartesianIndices(map( (a,b)-> a:b,
                    max.(xᶜ .- γ, 1),
                    min.(xᶜ .+ γ, sz) ))
Base.iterate(hc::Hypercube)= begin
  i= iterate(hc.indices)
  !isnothing(i) ? (i[1].I,i[2]) : nothing
end
Base.iterate(hc::Hypercube,state)= begin
  i= iterate(hc.indices,state)
  !isnothing(i) ? (i[1].I,i[2]) : nothing
end
Base.length(hc::Hypercube)= length(hc.indices)
Base.size(hc::Hypercube)= size(hc.indices)
# Infrastructure
ℓ(sz)= prod(sz)
step!(s::Symbol,args...)= step!(Val(s),args...)
```

Ας συνθέσουμε την αρχικοποίηση της κατάστασης και τις παραμέτρους.
```julia; results= "hidden"
@with_kw struct SPParams{Nin,Nsp}
  szᵢₙ::NTuple{Nin,Int}    = (32,32); @assert all(szᵢₙ.>0)
  szₛₚ::NTuple{Nsp,Int}    = (64,64); @assert all(szₛₚ.>0)
  γ::Int                   = 6;       @assert γ>0
  φ::Float32               = γ*mean(szₛₚ./szᵢₙ)
  s::Float32               = .02;     @assert s>0
  θ_potential_prob::Float32= .5;      @assert 0<=θ_potential_prob<=1
  θ_permanence01           = .5;      @assert 0<=θ_permanence01<=1
  p⁺_01                    = .1;      @assert 0<=p⁺_01<=1
  p⁻_01                    = .02;     @assert 0<=p⁻_01<=1
  θ_permanence::𝕊𝕢       = @>> θ_permanence01*typemax(𝕊𝕢) round(𝕊𝕢)
  p⁺::𝕊𝕢                 = round(𝕊𝕢, p⁺_01*typemax(𝕊𝕢))
  p⁻::𝕊𝕢                 = round(𝕊𝕢, p⁻_01*typemax(𝕊𝕢))
  θ_stimulus_activate::Int = 1;       @assert θ_stimulus_activate>=0
  Tboost::Float32          = 200;     @assert Tboost>0
  β::Float32               = 1;       @assert β>0
  @assert φ>=1
  @assert zero(𝕊𝕢)<=θ_permanence<=typemax(𝕊𝕢)
  @assert zero(𝕊𝕢)<=p⁺<=typemax(𝕊𝕢)
  @assert zero(𝕊𝕢)<=p⁻<=typemax(𝕊𝕢)
end
struct SpatialPooler{Nin,Nsp}
  params::SPParams{Nin,Nsp}
  Dₚ::Matrix{𝕊𝕢}
  åₜ::Array{Float32,Nsp}

  SpatialPooler(params::SPParams{Nin,Nsp}) where {Nin,Nsp}= begin
    @unpack szᵢₙ,szₛₚ,θ_potential_prob,γ = params

    xᶜ(yᵢ)= floor.(Int, (yᵢ.-1) .* (szᵢₙ./szₛₚ)) .+1
    xᵢ(xᶜ)= Hypercube(xᶜ,γ,szᵢₙ)
    θ_effective()= floor(𝕊𝕢, (1 - θ_potential_prob)*typemax(𝕊𝕢))
    out_lattice()= (c.I for c in CartesianIndices(szₛₚ))
    permanences(xᵢ)= begin
      # Decide randomly if yᵢ ⟷ xᵢ will connect
      p= rand(𝕊𝕢range,length(xᵢ))
      p0= p .> θ_effective(); pScale= p .< θ_effective()
      p[p0].= 𝕊𝕢(0)
      # Draw permanences from uniform distribution in 𝕊𝕢
      p[pScale].= rand(𝕊𝕢range, count(pScale))
      return p
    end
    fillin_permanences()= begin
      Dₚ= zeros(𝕊𝕢, ℓ(szᵢₙ),ℓ(szₛₚ))
      foreach(out_lattice()) do yᵢ
        # Linear indices from hypercube
        x= @>> yᵢ xᶜ xᵢ collect map(x->c2lᵢₙ[x...])
        Dₚ[x, c2lₛₚ[yᵢ...]]= permanences(@> yᵢ xᶜ xᵢ)
      end
      return Dₚ
    end
    c2lᵢₙ= LinearIndices(szᵢₙ)
    c2lₛₚ= LinearIndices(szₛₚ)

    new{Nin,Nsp}(params,
                 fillin_permanences(),
                 zeros(szₛₚ...))
  end
end
```

Η συνάρτηση ενεργοποίησης γίνεται:
```julia; results= "hidden"
sp_activate(z,sp::SpatialPooler{Nin,Nsp}) where {Nin,Nsp}= begin
  @unpack szₛₚ,s,φ,β,θ_permanence,θ_stimulus_activate = sp.params
  @unpack Dₚ,åₜ = sp
  # overlap
  Wₚ()=  Dₚ .> θ_permanence
  o(z)=  @> (b() .* Wₚ()'z) reshape(szₛₚ)
  # inhibition
  α(φ)=  2round(Int,φ)+1
  k()=   ceil(Int, s*α(φ)^Nsp)
  z!(X)= @> X vec partialsort!(k(),rev=true)
  Z(o)=  mapwindow(z!, o, window(), border= Fill(0))
  # boosting
  window()= ntuple(i->α(φ),Nsp)
  mean_kernel()= ones(window()) ./ α(φ).^Nsp
  åₙ()=  imfilter(åₜ, mean_kernel(), "symmetric")
  b()=   @> exp.(-β .* (åₜ .- åₙ())) vec

  activate(o)= ((o .>= Z(o)) .& (o .> θ_stimulus_activate))|> vec
  z|> o|> activate
end
```

Ας συνθέσουμε τη συνάρτηση βήματος του χωρικού συγκεντρωτή.
Η συνάρτηση λαμβάνει την είσοδο, υπολογίζει την ενεργοποίηση και πραγματοποιεί τις απαιτούμενες μεταβολές κατάστασης.
```julia; results= "hidden"
step!(::Val{:sp}, sp,z)= begin
  a= sp_activate(z,sp)
  step!(:åₜ, sp,a)
  step!(:Dₚ, sp,z,a)
  return a
end
step!(::Val{:åₜ}, sp,a)= begin
  @unpack Tboost, szₛₚ = sp.params
  sp.åₜ.= (sp.åₜ.*(Tboost-1) .+ reshape(a,szₛₚ))./Tboost
end
step!(::Val{:Dₚ}, sp,z,a)= learn!(sp.Dₚ,z,a,sp.params)
learn!(Dₚ,z,a,params)= begin
  @unpack p⁺,p⁻ = params
  Dₚactive= @view Dₚ[:,a]   # the only elements we touch
  activeConn=   (Dₚactive .> 0) .&   z
  inactiveConn= (Dₚactive .> 0) .& .!z
  Dₚactive.= activeConn   .* (Dₚactive .⊕ p⁺) .+
             inactiveConn .* (Dₚactive .⊖ p⁻)
end
# saturated arithmetic
⊕(a::T,b::T) where {T<:Unsigned}= a+b>a ? a+b : typemax(T)
⊖(a::T,b::T) where {T<:Unsigned}= a-b<a ? a-b : one(T)
⊕(a::T,b::T) where {T<:Signed}= a+b>a ? a+b : typemax(T)
⊖(a::T,b::T) where {T<:Signed}= a-b>0 ? a-b : one(T)
```
